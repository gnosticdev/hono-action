import { describe, expect, it } from 'bun:test'
import {
    generateAstroHandler,
    generateHonoClient,
    generateRouter,
} from '../src/integration-files'

describe('Integration Files', () => {
    describe('generateRouter', () => {
        it('should generate router with correct base path', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../src/hono/actions',
            })

            expect(routerContent).toContain("basePath('/api')")
            expect(routerContent).toContain(
                "await import('../src/hono/actions')",
            )
            expect(routerContent).toContain('HonoEnv')
            expect(routerContent).toContain('buildRouter')
            expect(routerContent).toContain('showRoutes')
        })

        it('should generate router with custom base path', () => {
            const routerContent = generateRouter({
                basePath: '/api/v1',
                relativeActionsPath: './actions',
            })

            expect(routerContent).toContain("basePath('/api/v1')")
            expect(routerContent).toContain("await import('./actions')")
        })

        it('should include all necessary imports', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../actions',
            })

            expect(routerContent).toContain(
                "import type { HonoEnv, MergeActionKeyIntoPath } from '@gnosticdev/hono-actions/actions'",
            )
            expect(routerContent).toContain("import { Hono } from 'hono'")
            expect(routerContent).toContain("import { cors } from 'hono/cors'")
            expect(routerContent).toContain(
                "import { showRoutes } from 'hono/dev'",
            )
            expect(routerContent).toContain(
                "import { logger } from 'hono/logger'",
            )
            expect(routerContent).toContain(
                "import { prettyJSON } from 'hono/pretty-json'",
            )
        })

        it('should include middleware setup', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../actions',
            })

            expect(routerContent).toContain(
                "app.use('*', cors(), logger(), prettyJSON())",
            )
        })

        it('should include action routing logic', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../actions',
            })

            expect(routerContent).toContain(
                'for (const [routeName, action] of Object.entries(honoActions))',
            )
            expect(routerContent).toContain(
                'app.route(`/${routeName}`, action)',
            )
        })

        it('should include type definitions', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../actions',
            })

            expect(routerContent).toContain(
                `type ActionsWithKeyedPaths = MergeActionKeyIntoPath<typeof honoActions>`,
            )
            expect(routerContent).toContain(
                'type ActionSchema = ExtractSchema<ActionsWithKeyedPaths[keyof ActionsWithKeyedPaths]>',
            )
            expect(routerContent).toContain(
                'export type HonoRouter = Awaited<ReturnType<typeof buildRouter>>',
            )
        })

        it('should include route display and export', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../actions',
            })

            expect(routerContent).toContain('showRoutes(app)')
            expect(routerContent).toContain('export default app')
        })
    })

    describe('getAstroHandler', () => {
        it('should generate cloudflare handler', () => {
            const handlerContent = generateAstroHandler('@astrojs/cloudflare')

            expect(handlerContent).toContain(
                '// Generated by Hono Actions Integration',
            )
            expect(handlerContent).toContain("import router from './router.js'")
            expect(handlerContent).toContain(
                "import type { APIContext, APIRoute } from 'astro'",
            )
            expect(handlerContent).toContain(
                'const handler: APIRoute<APIContext> = async (ctx) =>',
            )
            expect(handlerContent).toContain('return router.fetch(')
            expect(handlerContent).toContain('ctx.request,')
            expect(handlerContent).toContain('ctx.locals.runtime.env,')
            expect(handlerContent).toContain('ctx.locals.runtime.ctx,')
            expect(handlerContent).toContain('export { handler as ALL }')
        })

        it('should throw error for unsupported adapter', () => {
            expect(() => generateAstroHandler('unsupported' as any)).toThrow(
                'Unsupported adapter: unsupported',
            )
        })

        it('should include proper TypeScript types', () => {
            const handlerContent = generateAstroHandler('@astrojs/cloudflare')

            expect(handlerContent).toContain('APIRoute<APIContext>')
            expect(handlerContent).toContain('async (ctx) =>')
        })

        it('should use correct router import path', () => {
            const handlerContent = generateAstroHandler('@astrojs/cloudflare')

            expect(handlerContent).toContain("import router from './router.js'")
        })
    })

    describe('getHonoClient', () => {
        it('should generate client with default port', () => {
            const clientContent = generateHonoClient(3000)

            expect(clientContent).toContain(
                '// Generated by Hono Actions Integration',
            )
            expect(clientContent).toContain(
                "import type { HonoRouter } from './router.js'",
            )
            expect(clientContent).toContain(
                "import { hc, parseResponse } from 'hono/client'",
            )
            expect(clientContent).toContain('function getBaseUrl()')
            expect(clientContent).toContain('export { parseResponse, hc }')
            expect(clientContent).toContain(
                'export const honoClient = hc<HonoRouter>(getBaseUrl())',
            )
        })

        it('should generate client with custom port', () => {
            const clientContent = generateHonoClient(8080)

            expect(clientContent).toContain('return `http://localhost:${8080}`')
        })

        it('should generate client with custom site URL', () => {
            const clientContent = generateHonoClient(3000)

            expect(clientContent).toContain("return import.meta.env.SITE ?? ''")
        })

        it('should handle client-side detection', () => {
            const clientContent = generateHonoClient(3000)

            expect(clientContent).toContain(
                "if (typeof window !== 'undefined')",
            )
            expect(clientContent).toContain("return '/'")
        })

        it('should handle development environment', () => {
            const clientContent = generateHonoClient(3000)

            expect(clientContent).toContain('if (import.meta.env.DEV)')
            expect(clientContent).toContain('return `http://localhost:${3000}`')
        })

        it('should handle production environment', () => {
            const clientContent = generateHonoClient(3000)

            expect(clientContent).toContain("return import.meta.env.SITE ?? ''")
        })

        it('should include proper TypeScript types', () => {
            const clientContent = generateHonoClient(3000)

            expect(clientContent).toContain(
                "import type { HonoRouter } from './router.js'",
            )
            expect(clientContent).toContain('hc<HonoRouter>')
        })

        it('should handle site URL parameter correctly', () => {
            const clientContent = generateHonoClient(3000)

            expect(clientContent).toContain("return import.meta.env.SITE ?? ''")
        })
    })

    describe('integration consistency', () => {
        it('should generate consistent router and client imports', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../actions',
            })
            const clientContent = generateHonoClient(3000)

            // Both should reference the same router file
            expect(routerContent).toContain('export type HonoRouter')
            expect(clientContent).toContain(
                "import type { HonoRouter } from './router.js'",
            )
        })

        it('should use consistent base path across generated files', () => {
            const basePath = '/api/v1'
            const routerContent = generateRouter({
                basePath,
                relativeActionsPath: '../actions',
            })
            const handlerContent = generateAstroHandler('@astrojs/cloudflare')

            expect(routerContent).toContain(`basePath('${basePath}')`)
            // Handler should work with any base path since it uses the router
            expect(handlerContent).toContain('router.fetch(')
        })
    })

    describe('edge cases', () => {
        it('should handle empty base path', () => {
            const routerContent = generateRouter({
                basePath: '',
                relativeActionsPath: '../actions',
            })

            expect(routerContent).toContain("basePath('')")
        })

        it('should handle complex relative paths', () => {
            const routerContent = generateRouter({
                basePath: '/api',
                relativeActionsPath: '../../src/server/actions',
            })

            expect(routerContent).toContain(
                "await import('../../src/server/actions')",
            )
        })

        it('should handle port 0 (random port)', () => {
            const clientContent = generateHonoClient(0)

            expect(clientContent).toContain('return `http://localhost:${0}`')
        })
    })
})
