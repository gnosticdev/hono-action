import type { SUPPORTED_ADAPTERS } from './integration'

/**
 * Generate router using the buildRouter pattern for better type inference
 */
export function generateRouter(opts: {
    basePath: string
    relativeActionsPath: string
}) {
    const { basePath, relativeActionsPath } = opts

    return `import type { HonoEnv, MergeActionKeyIntoPath } from '@gnosticdev/hono-actions/actions'
import { Hono } from 'hono'
import { cors } from 'hono/cors'
import { showRoutes } from 'hono/dev'
import { logger } from 'hono/logger'
import { prettyJSON } from 'hono/pretty-json'
import type { ExtractSchema, MergeSchemaPath } from 'hono/types'

async function buildRouter(){
    type ActionsWithKeyedPaths = MergeActionKeyIntoPath<typeof honoActions>
    type ActionSchema = ExtractSchema<ActionsWithKeyedPaths[keyof ActionsWithKeyedPaths]>
    const { honoActions} = await import('${relativeActionsPath}')
    const app = new Hono<HonoEnv, MergeSchemaPath<ActionSchema, \`${basePath}\`>>().basePath('${basePath}')

    app.use('*', cors(), logger(), prettyJSON())

    for (const [routeName, action] of Object.entries(honoActions)) {
        app.route(\`/\${routeName}\`, action)
    }

    return app
}

export type HonoRouter = Awaited<ReturnType<typeof buildRouter>>

const app = await buildRouter()
console.log('------- Hono Routes -------')
showRoutes(app)
console.log('---------------------------')
export default app`
}

/**
 * Injects the Hono router into the Astro API route handler at `src/pages/api/[...slug].ts`
 *
 * @param adapter - The adapter in use from the astro config
 *
 * For use with `@astrojs/cloudflare` adapter only (for now).a
 */
export const getAstroHandler = (
    adapter: (typeof SUPPORTED_ADAPTERS)[number],
) => {
    switch (adapter) {
        case '@astrojs/cloudflare':
            return `
/// <reference types="./types.d.ts" />
// Generated by Hono Actions Integration
import router from './router.js'
import type { APIContext, APIRoute } from 'astro'

const handler: APIRoute<APIContext> = async (ctx) => {
    return router.fetch(
        ctx.request,
        ctx.locals.runtime.env,
        ctx.locals.runtime.ctx,
    )
}

export { handler as ALL }
`
        default:
            throw new Error(`Unsupported adapter: ${adapter}`)
    }
}
export const getHonoClient = (port: number) => `
// Generated by Hono Actions Integration
import type { HonoRouter } from './router.js'
import { hc, parseResponse } from 'hono/client'

function getBaseUrl() {
    // client side can just use the base path
    if (typeof window !== 'undefined') {
        return '/'
    }

    // dev server (dev server) needs to know the port
    if (import.meta.env.DEV) {
        return \`http://localhost:\${${port}}\`
    }

    // server side (production) needs full url
    return import.meta.env.SITE ?? ''
}
export { parseResponse, hc }
export const honoClient = hc<HonoRouter>(getBaseUrl())
`
